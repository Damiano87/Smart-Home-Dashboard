generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  homes         Home[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Home {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  location  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  rooms     Room[]
  createdAt DateTime @default(now())
}

model Room {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  floor   Int?
  area    Float?
  home    Home     @relation(fields: [homeId], references: [id])
  homeId  String   @db.ObjectId
  devices Device[]
}

model Device {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  type           String // np. temperature_sensor, light, motion_sensor, air_conditioner
  status         String // online/offline
  isActive       Boolean         @default(true)
  lastSeen       DateTime
  room           Room            @relation(fields: [roomId], references: [id])
  roomId         String          @db.ObjectId
  data           SensorData[]
  events         DeviceEvent[]
  airConditioner AirConditioner?
  light          Light?
}

model SensorData {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp   DateTime @default(now())
  device      Device   @relation(fields: [deviceId], references: [id])
  deviceId    String   @db.ObjectId
  temperature Float?
  humidity    Float?
  co2         Int?
  power       Float? // energy usage by air conditioner
  airQuality  Int?
  noiseLevel  Int?

  // additional data about air conditioners
  setTemperature Float? // set temperature 
  energyUsage    Float? // current energy usage
}

model DeviceEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  device    Device   @relation(fields: [deviceId], references: [id])
  deviceId  String   @db.ObjectId
  timestamp DateTime @default(now())
  type      String // e.g., motion_detected, turned_on, ac_mode_changed, temp_reached
  details   Json?
}

model AirConditioner {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId String @unique @db.ObjectId

  // basic air conditioner settings
  targetTemp  Float? // target temperature
  currentTemp Float? // current temperature
  mode        String  @default("off") // off, cool, heat, auto, fan, dry
  fanSpeed    String  @default("auto") // auto, low, medium, high
  swing       Boolean @default(false) // is oscilation on

  // advanced settings
  timerOn   DateTime? // timer on
  timerOff  DateTime? // timer off
  ecoMode   Boolean   @default(false)
  sleepMode Boolean   @default(false)

  // temperature limits
  minTemp Float @default(16.0)
  maxTemp Float @default(32.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("air_conditioners")
}

model Light {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId String @unique @db.ObjectId

  // podstawowe ustawienia światła
  isOn       Boolean @default(false)
  brightness Int     @default(100) // 0-100%
  color      String? // hex color dla smart bulbs

  // zaawansowane funkcje
  dimming   Boolean @default(false) // czy wspiera ściemnianie
  colorTemp Int? // temperatura barwowa (2700K-6500K)

  // harmonogramy
  timerOn  DateTime?
  timerOff DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lights")
}
