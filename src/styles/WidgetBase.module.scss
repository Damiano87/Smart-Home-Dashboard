@use "./variables.scss" as vars;

// Base widget container
.widget {
  background-color: vars.$widget-bg;
  border-radius: vars.$border-radius;
  padding: 1.5rem;
  transition: vars.$transition;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  }
}

// Widget header styles
.header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1.5rem;
}

.iconContainer {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 50%;
}

.icon {
  color: vars.$chart1;
  width: 1.25rem;
  height: 1.25rem;
}

.title {
  color: vars.$primary-text;
  font-size: 1.125rem;
  font-weight: 600;
  margin: 0;
}

// Content area
.content {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

// Main metric display
.mainMetric {
  display: flex;
  align-items: baseline;
  gap: 0.5rem;
}

.value,
.mainValue {
  color: vars.$primary-text;
  font-size: 2.25rem;
  font-weight: 700;
  line-height: 1;
}

.unit {
  color: vars.$secondary-text;
  font-size: 1rem;
  font-weight: 500;
}

.period,
.label {
  color: vars.$secondary-text;
  font-size: 0.875rem;
}

// Metric items (secondary metrics)
.metrics {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.metric {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem;
  background-color: rgba(255, 255, 255, 0.05);
  border-radius: calc(vars.$border-radius - 0.125rem);
}

.metricIcon {
  display: flex;
  align-items: center;
}

.metricInfo {
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.metricValue {
  color: vars.$primary-text;
  font-size: 0.95rem;
  font-weight: 600;
}

.metricLabel {
  color: vars.$secondary-text;
  font-size: 0.8rem;
}

// Status bar styles
.statusBar,
.progressBar {
  width: 100%;
  height: 0.5rem;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 0.25rem;
  overflow: hidden;
}

.statusProgress,
.progress {
  height: 100%;
  border-radius: 0.25rem;
  transition: width 0.6s ease-out;
  background: linear-gradient(90deg, vars.$chart1 0%, vars.$chart6 100%);
}

// Summary styles
.summary {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

// Two-column layout for status items
.statusDetails,
.details {
  display: flex;
  justify-content: space-between;
  gap: 1rem;
}

.statusItem,
.detailItem {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex: 1;
  padding: 0.75rem;
  background-color: rgba(255, 255, 255, 0.05);
  border-radius: calc(vars.$border-radius - 0.125rem);
}

.statusIcon,
.detailIcon {
  display: flex;
  align-items: center;
}

.statusCount,
.detailValue {
  color: vars.$primary-text;
  font-size: 1.125rem;
  font-weight: 600;
}

.statusLabel,
.detailLabel {
  color: vars.$secondary-text;
  font-size: 0.8rem;
  margin-left: auto;
}

// Range display (for min/max values)
.range {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.rangeItem {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex: 1;
}

.rangeIcon {
  display: flex;
  align-items: center;
}

.rangeInfo {
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.rangeValue {
  color: vars.$primary-text;
  font-size: 1rem;
  font-weight: 600;
}

.rangeLabel {
  color: vars.$secondary-text;
  font-size: 0.75rem;
}

.rangeDivider {
  width: 1px;
  height: 2rem;
  background-color: rgba(255, 255, 255, 0.1);
}

// Badge styles
.badge {
  display: inline-flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.25rem 0.75rem;
  border-radius: 1rem;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.025em;
}

.badgeGood {
  background-color: rgba(24, 184, 126, 0.2);
  color: vars.$semantic-positive;
}

.badgeWarning {
  background-color: rgba(245, 220, 113, 0.2);
  color: vars.$yellow-600;
}

.badgeError {
  background-color: rgba(255, 150, 126, 0.2);
  color: vars.$semantic-negative;
}

// Loading states
.loading {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 8rem;
  color: vars.$secondary-text;
}

// Tooltip
.tooltip {
  background-color: vars.$dashboard-bg;
  color: vars.$primary-text;
  padding: 0.5rem 0.75rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

// temperature widget
.temperatureBar {
  position: relative;
  height: 0.5rem;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 0.25rem;
  overflow: hidden;
}

.temperatureScale {
  display: flex;
  height: 100%;
  width: 100%;
}

.scaleSegment {
  flex: 1;

  &[data-temp="cold"] {
    background-color: vars.$chart1;
  }

  &[data-temp="optimal"] {
    background-color: vars.$chart2;
  }

  &[data-temp="warm"] {
    background-color: red;
  }
}

.temperatureIndicator {
  position: absolute;
  top: -2px;
  width: 4px;
  height: calc(100% + 4px);
  background-color: vars.$primary-text;
  border-radius: 2px;
  transform: translateX(-50%);
  transition: left 0.6s ease-out;
}

.mainTemperature {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.temperature {
  font-size: 2.5rem;
  font-weight: 700;
  line-height: 1;

  &.cold {
    color: vars.$chart5;
  }

  &.optimal {
    color: vars.$semantic-positive;
  }

  &.warm {
    color: vars.$semantic-negative;
  }
}

.roomInfo {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: vars.$secondary-text;
  font-size: 0.875rem;
}

// air quality widget
.qualityBar {
  position: relative;
  height: 0.5rem;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 0.25rem;
  overflow: hidden;
}

.qualityScale {
  display: flex;
  height: 100%;
  width: 100%;
}

.scaleSegment {
  flex: 1;

  &[data-quality="good"] {
    background-color: vars.$chart1;
  }

  &[data-quality="moderate"] {
    background-color: vars.$chart2;
  }

  &[data-quality="poor"] {
    background-color: red;
  }
}

.qualityIndicator {
  position: absolute;
  top: -2px;
  width: 4px;
  height: calc(100% + 4px);
  background-color: vars.$primary-text;
  border-radius: 2px;
  transform: translateX(-50%);
  transition: left 0.6s ease-out;
}
